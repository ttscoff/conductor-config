#!/usr/bin/env ruby -W1
# frozen_string_literal: true

# Version 2 (02-03-2015)
#
# Example custom processor for use with Marked <http://markedapp.com> and Jekyll _posts
# It's geared toward my personal set of plugins and tags, but you'll get the idea.
#   It turns
# {% img alignright /images/heythere.jpg 100 100 "Hey there" "hi" %}
#   into
# <img src="../images/heythere.jpg" alt="Hey there" class="alignright" title="hi" />
#
# replaces alignleft and alignright classes with appropriate style attribute
# ---
# Replaces {% gist XXXXX filename.rb %} with appropriate script tag
#
# Replace various other OctoPress, Jekyll and custom tags
#
# Processes final output with /usr/bin/kramdown (install kramdown as system gem: `sudo gem install kramdown`)
#
# Be sure to run *without* stripping YAML headers in Marked Behavior preferences.

require 'rubygems'
require 'shellwords'
require 'kramdown'
require 'uri'
require 'cgi'
require 'erb'
require 'logger'
require 'nokogiri/nokogiri'

$LOAD_PATH.unshift File.join("#{File.dirname(__FILE__)}/lib")
require 'helpdocs'

@logger = Logger.new(File.expand_path('~/logs/jekyllpre.log'))

def class_exists?(class_name)
  klass = Module.const_get(class_name)
  klass.is_a?(Class)
rescue NameError
  false
end

if class_exists? 'Encoding'
  Encoding.default_external = Encoding::UTF_8 if Encoding.respond_to?('default_external')
  Encoding.default_internal = Encoding::UTF_8 if Encoding.respond_to?('default_internal')
end

begin
  content = $stdin.read.force_encoding('utf-8')
rescue StandardError
  content = $stdin.read
end

class String
  def inject_meta(string)
    keys = `echo #{Shellwords.escape(self)}|multimarkdown -m`.strip
    if keys.empty?
      "#{string}\n\n#{self}"
    else
      "#{string}\n#{self}"
    end
  end

  def inject_meta!(string)
    replace inject_meta(string)
  end
end

def process_docs(content)
  content = content.render_liquid(pdf: 'marked')
  content = Utils.remove_todos(content)
  if ENV['MARKED_ORIGIN'] =~ /nvultra/
    content.inject_meta!('Marked CSS: nvUltra')
  elsif ENV['MARKED_ORIGIN'] =~ /HelpDocs/
    title = File.basename(ENV['MARKED_PATH'], '.md').gsub(/_/, ' ')
    content.sub!(/<%= @title %>/, title)
    content.inject_meta!('Marked CSS: Marked Help')
  end
  puts content
end

if ENV['MARKED_ORIGIN'] =~ /(HelpDocs|nvultra)/i
  warn('Looks like help docs')
  process_docs(content)
else
  source = File.dirname(ENV['MARKED_PATH'])
  content.gsub!(/\[\[(.*?)\]\]/) do
    title = Regexp.last_match(1)
    "[#{title}](#{File.join(source, ERB::Util.url_encode(title).sub(/(\.md)?$/, '.md'))})"
  end
  style = ENV['MARKED_ORIGIN'] =~ %r{/bunch/} ? 'Bunch' : 'brettterpstra-2023'
  content.sub!(/^---\n/m, "---\nmarked style: #{style}\n")
  puts content
end
