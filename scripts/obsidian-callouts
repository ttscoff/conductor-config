#!/usr/bin/env ruby
# frozen_string_literal: true

require 'erb'

module Callouts
  SVG = {
    fold: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-chevron-down"><path d="m6 9 6 6 6-6"></path></svg>',
    tip: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg>',
    info: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>',
    note: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg>',
    success: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-check"><path d="M20 6 9 17l-5-5"></path></svg>',
    question: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-help-circle"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><path d="M12 17h.01"></path></svg>',
    todo: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-check-circle-2"><circle cx="12" cy="12" r="10"></circle><path d="m9 12 2 2 4-4"></path></svg>',
    abstract: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-clipboard-list"><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="M12 11h4"></path><path d="M12 16h4"></path><path d="M8 11h.01"></path><path d="M8 16h.01"></path></svg>',
    warning: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-alert-triangle"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg>',
    failure: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg>',
    danger: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-zap"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon></svg>',
    bug: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-bug"><path d="m8 2 1.88 1.88"></path><path d="M14.12 3.88 16 2"></path><path d="M9 7.13v-1a3.003 3.003 0 1 1 6 0v1"></path><path d="M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6"></path><path d="M12 20v-9"></path><path d="M6.53 9C4.6 8.8 3 7.1 3 5"></path><path d="M6 13H2"></path><path d="M3 21c0-2.1 1.7-3.9 3.8-4"></path><path d="M20.97 5c0 2.1-1.6 3.8-3.5 4"></path><path d="M22 13h-4"></path><path d="M17.2 17c2.1.1 3.8 1.9 3.8 4"></path></svg>',
    example: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-list"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>',
    quote: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-quote"><path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path><path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path></svg>'
  }

  FOLDABLE_HTML = <<~ENDFOLDHTML
    <!-- foldable, content -->
    <div data-callout="<%= @type %>" class="callout is-collapsible">
      <div class="callout-title">
        <div class="callout-icon"><%= @svg %></div>
        <div class="callout-title-inner"><%= @title %></div>
        <div class="callout-fold"><%= SVG[:fold] %></div>
      </div>
      <div class="callout-content" style="">
        <p><%= @content %></p>
      </div>
    </div>
  ENDFOLDHTML

  CONTENT_HTML = <<~ENDCONTENTHTML
    <!-- content -->
    <div data-callout="<%= @type %>" class="callout">
      <div class="callout-title">
        <div class="callout-icon"><%= @svg %></div>
        <div class="callout-title-inner"><%= @title %></div>
      </div>
      <div class="callout-content">
        <p><%= @content %></p>
      </div>
    </div>
  ENDCONTENTHTML

  TITLE_HTML = <<~ENDTITLEHTML
    <!-- title only -->
    <div data-callout="<%= @type %>" class="callout">
      <div class="callout-title">
        <div class="callout-icon"><%= @svg %></div>
        <div class="callout-title-inner"><%= @title %></div>
      </div>
    </div>
  ENDTITLEHTML
end

include Callouts

##
## Process callouts in input
##
## @param      input   [String]  The input
##
## @return     [String] Processed callouts
##
def process(input)
  callout_rx = /(?mix)
    ^(?<indent>(?:>\s*)+)\[!
      (?<type>note|abstract|summary|tldr|info|todo|tip|hint|important|success|
      check|done|question|help|faq|warning|caution|attention|failure|fail|
      missing|danger|error|bug|example|quote|cite|)
      \](?<foldable>-?)(\s+(?<title>[\s\S]*?))?\s*(\n|\Z)
      (?<content>(>\s[\s\S]*?(?:\n|\Z))*)/
  content = input.force_encoding('utf-8')
  match_datas = content.to_enum(:scan, callout_rx).map { Regexp.last_match }
  match_datas.each do |m|
    orig = m[0]
    res = template_input(m)
    content.sub!(/#{Regexp.escape(orig)}/, res)
  end

  content
end

def template_input(m)
  title = m['title'] || m['type'].capitalize

  content = m['content'] ? process(m['content']) : m['content']

  @type = case m['type'].downcase
          when /(abstract|summary|tldr)/
            'abstract'
          when /info/
            'info'
          when /todo/
            'todo'
          when /(tip|hint|important)/
            'tip'
          when /(success|check|done)/
            'success'
          when /(question|help|faq)/
            'question'
          when /(warning|caution|attention)/
            'warning'
          when /(failure|fail|missing)/
            'failure'
          when /(danger|error)/
            'danger'
          when /bug/
            'bug'
          when /example/
            'example'
          when /(quote|cite)/
            'quote'
          else
            'note'
          end

  content.gsub!(/^ *>(.*?)(\n *>(.*?))+$/) do |mtch|
    mtch.split(/\n/).join("\n<br>\n")
  end
  content.gsub!(/^\s*> +/, '')

  @svg = SVG[@type.to_sym]

  @content = content
  @title = title

  template = if m['foldable'] == '-'
               ERB.new(FOLDABLE_HTML.dup)
             elsif m['content'] && !m['content'].empty?
               ERB.new(CONTENT_HTML.dup)
             else
               ERB.new(TITLE_HTML.dup)
             end
  template.result
end

puts process($stdin.read)
